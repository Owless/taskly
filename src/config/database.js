// src/config/database.js
// –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Supabase –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

const { createClient } = require('@supabase/supabase-js');
const { Pool } = require('pg');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const databaseUrl = process.env.DATABASE_URL;

if (!supabaseUrl || !supabaseServiceKey || !databaseUrl) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.error('- SUPABASE_URL:', !!supabaseUrl);
  console.error('- SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  console.error('- DATABASE_URL:', !!databaseUrl);
  process.exit(1);
}

// Supabase –∫–ª–∏–µ–Ω—Ç —Å service role (–ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è backend)
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: databaseUrl,
  ssl: {
    rejectUnauthorized: false
  },
  max: 10, // –º–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
pool.on('connect', () => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
const query = async (text, params = []) => {
  const start = Date.now();
  
  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development' && process.env.DEBUG_SQL === 'true') {
      console.log(`üîç SQL (${duration}ms): ${text.substring(0, 60)}...`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå SQL Error:', {
      query: text.substring(0, 100) + '...',
      error: error.message
    });
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è Row Level Security)
const setUserContext = async (userId) => {
  if (!userId) return;
  
  try {
    await query('SELECT set_config($1, $2, true)', [
      'app.current_user_id', 
      userId.toString()
    ]);
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error.message);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const healthCheck = async () => {
  try {
    const result = await query('SELECT NOW() as current_time');
    return {
      status: 'ok',
      timestamp: result.rows[0].current_time,
      connections: pool.totalCount
    };
  } catch (error) {
    return {
      status: 'error',
      error: error.message
    };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const checkTables = async () => {
  try {
    const result = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('users', 'tasks', 'donations', 'notifications')
      ORDER BY table_name;
    `);
    
    const existingTables = result.rows.map(row => row.table_name);
    const requiredTables = ['users', 'tasks', 'donations', 'notifications'];
    
    const missingTables = requiredTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables);
      console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SQL —Å—Ö–µ–º–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }
    
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã:', existingTables);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
    return false;
  }
};

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  await pool.end();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  await pool.end();
  process.exit(0);
});

module.exports = {
  supabase,
  pool,
  query,
  setUserContext,
  healthCheck,
  checkTables
};
