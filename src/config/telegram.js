// Telegram Bot configuration
const telegramConfig = {
  // Bot settings
  botToken: process.env.TELEGRAM_BOT_TOKEN,
  botUsername: process.env.TELEGRAM_BOT_USERNAME || 'taskly_bot',
  
  // Webhook settings
  webhookUrl: process.env.TELEGRAM_WEBHOOK_URL,
  webhookSecret: process.env.TELEGRAM_WEBHOOK_SECRET,
  
  // API settings
  apiBase: 'https://api.telegram.org',
  maxRetries: 3,
  retryDelay: 1000,
  timeout: 30000,
  
  // Rate limiting
  maxMessagesPerSecond: 30,
  maxMessagesPerMinute: 20,
  
  // Mini App settings
  miniAppUrl: process.env.FRONTEND_URL || 'https://your-app.com',
  
  // Commands configuration
  commands: [
    {
      command: 'start',
      description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'
    },
    {
      command: 'app',
      description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
    },
    {
      command: 'help',
      description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º'
    },
    {
      command: 'stats',
      description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á'
    },
    {
      command: 'settings',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    }
  ],
  
  // Notification settings
  notifications: {
    defaultEnabled: true,
    defaultReminderTime: '09:00',
    maxNotificationsPerDay: 50,
    quietHoursStart: '22:00',
    quietHoursEnd: '07:00',
    
    // Message templates
    templates: {
      welcome: {
        text: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly, {first_name}!\n\nüìã –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram\n\nüöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!',
        keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: '{app_url}' }
        }]]
      },
      
      taskReminder: {
        text: 'üìã <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>\n\n<b>{title}</b>\n{due_info}{priority_info}',
        keyboard: [[
          {
            text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å',
            callback_data: 'complete_task_{task_id}'
          },
          {
            text: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å',
            callback_data: 'postpone_task_{task_id}'
          }
        ], [{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: '{app_url}' }
        }]]
      },
      
      dailySummary: {
        text: 'üìä <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n{summary_text}',
        keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: '{app_url}' }
        }]]
      },
      
      paymentThankYou: {
        text: 'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É, {first_name}!\n\nüí´ {tier_title}\n–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å Taskly!',
        keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: '{app_url}' }
        }]]
      }
    }
  },
  
  // Payment settings (Telegram Stars)
  payments: {
    currency: 'XTR',
    maxTipAmount: 0,
    suggestedTipAmounts: [],
    needName: false,
    needPhoneNumber: false,
    needEmail: false,
    needShippingAddress: false,
    sendPhoneNumberToProvider: false,
    sendEmailToProvider: false,
    isFlexible: false,
    
    // Donation tiers
    tiers: [
      {
        amount: 25,
        title: '–ö–æ—Ñ–µ ‚òï',
        description: '–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        emoji: '‚òï'
      },
      {
        amount: 50,
        title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíô',
        description: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!',
        emoji: 'üíô'
      },
      {
        amount: 100,
        title: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚≠ê',
        description: '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!',
        emoji: '‚≠ê'
      },
      {
        amount: 250,
        title: '–ú–µ–≥–∞ —Å–ø–∞—Å–∏–±–æ üöÄ',
        description: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!',
        emoji: 'üöÄ'
      }
    ]
  },
  
  // Error messages
  errors: {
    userNotFound: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start',
    taskNotFound: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
    paymentFailed: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    notificationFailed: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    commandNotFound: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏'
  },
  
  // Feature flags
  features: {
    recurringTasks: true,
    notifications: true,
    payments: true,
    dailySummary: true,
    analytics: false
  }
};

// Validation
if (!telegramConfig.botToken) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN is required');
  process.exit(1);
}

// Helper functions
const formatTemplate = (template, variables = {}) => {
  let text = template.text;
  let keyboard = template.keyboard;
  
  // Replace variables in text
  Object.entries(variables).forEach(([key, value]) => {
    const placeholder = `{${key}}`;
    text = text.replace(new RegExp(placeholder, 'g'), value || '');
  });
  
  // Replace variables in keyboard
  if (keyboard) {
    keyboard = JSON.parse(JSON.stringify(keyboard));
    keyboard.forEach(row => {
      row.forEach(button => {
        if (button.callback_data) {
          Object.entries(variables).forEach(([key, value]) => {
            const placeholder = `{${key}}`;
            button.callback_data = button.callback_data.replace(new RegExp(placeholder, 'g'), value || '');
          });
        }
        if (button.web_app?.url) {
          Object.entries(variables).forEach(([key, value]) => {
            const placeholder = `{${key}}`;
            button.web_app.url = button.web_app.url.replace(new RegExp(placeholder, 'g'), value || '');
          });
        }
      });
    });
  }
  
  return { text, keyboard };
};

const isQuietHours = (timezone = 'Europe/Moscow') => {
  try {
    const now = new Date();
    const timeInTimezone = new Date(now.toLocaleString('en-US', { timeZone: timezone }));
    const hour = timeInTimezone.getHours();
    
    // Quiet hours: 22:00 - 07:00
    return hour >= 22 || hour < 7;
  } catch (error) {
    console.error('Timezone error:', error.message);
    return false;
  }
};

const getTierByAmount = (amount) => {
  return telegramConfig.payments.tiers.find(tier => tier.amount === amount);
};

const validateWebhookUpdate = (update) => {
  if (!update || typeof update !== 'object') {
    return false;
  }
  
  // Check for required fields
  if (!update.update_id) {
    return false;
  }
  
  return true;
};

module.exports = {
  config: telegramConfig,
  formatTemplate,
  isQuietHours,
  getTierByAmount,
  validateWebhookUpdate
};
