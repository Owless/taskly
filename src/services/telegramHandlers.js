const User = require('../models/User');
const Task = require('../models/Task');
const telegramService = require('./telegramService');
const notificationService = require('./notificationService');
const logger = require('../utils/logger');
const { 
  formatTaskList, 
  formatUserStats, 
  formatTaskForTelegram,
  escapeMarkdown 
} = require('../utils/formatters');
const { BOT_COMMANDS, EMOJIS, CALLBACK_PREFIXES } = require('../config/constants');
const { getCurrentDate } = require('../utils/dateHelpers');

class TelegramHandlers {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  static async handleMessage(message) {
    try {
      const { from, text, chat } = message;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
      if (chat.type !== 'private') {
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByTelegramId(from.id);
      
      if (!user && !text?.startsWith('/start')) {
        await telegramService.sendMessage(
          from.id,
          `${EMOJIS.INFO} –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start`
        );
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text?.startsWith('/')) {
        await TelegramHandlers.handleCommand(message, user);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      if (user && text?.trim()) {
        await TelegramHandlers.handleQuickTaskCreation(message, user);
        return;
      }

    } catch (error) {
      logger.error('Failed to handle message', {
        error: error.message,
        messageId: message.message_id,
        fromId: message.from.id
      });

      await telegramService.sendMessage(
        message.from.id,
        `${EMOJIS.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è`
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  static async handleCommand(message, user) {
    const { from, text } = message;
    const command = text.split(' ')[0].toLowerCase();
    const args = text.split(' ').slice(1);

    try {
      switch (command) {
        case BOT_COMMANDS.START:
          await TelegramHandlers.handleStartCommand(from, args, user);
          break;

        case BOT_COMMANDS.HELP:
          await TelegramHandlers.handleHelpCommand(from);
          break;

        case BOT_COMMANDS.TODAY:
          await TelegramHandlers.handleTodayCommand(from, user);
          break;

        case BOT_COMMANDS.ADD:
          await TelegramHandlers.handleAddCommand(from, args, user);
          break;

        case BOT_COMMANDS.SETTINGS:
          await TelegramHandlers.handleSettingsCommand(from, user);
          break;

        case BOT_COMMANDS.STATS:
          await TelegramHandlers.handleStatsCommand(from, user);
          break;

        case BOT_COMMANDS.SUPPORT:
          await TelegramHandlers.handleSupportCommand(from);
          break;

        default:
          await telegramService.sendMessage(
            from.id,
            `${EMOJIS.WARNING} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\\.`
          );
      }
    } catch (error) {
      logger.error('Failed to handle command', {
        error: error.message,
        command,
        fromId: from.id
      });

      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã`
      );
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  static async handleStartCommand(from, args, user) {
    let welcomeMessage;
    
    if (!user) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      welcomeMessage = `${EMOJIS.ROCKET} *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly\\!*

${EMOJIS.INFO} –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –ø—Ä—è–º–æ –≤ Telegram\\.

*–ß—Ç–æ —É–º–µ–µ—Ç Taskly:*
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
- –†–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ Telegram

*–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*
- –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add
- –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá`;
    } else {
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const stats = await user.getStats();
      welcomeMessage = `${EMOJIS.PARTY} *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${escapeMarkdown(user.first_name)}\\!*

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: *${stats.total_tasks}*
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: *${stats.completed_tasks}*
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: *${stats.active_tasks}*

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ üëá`;
    }

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('üöÄ –û—Ç–∫—Ä—ã—Ç—å Taskly', { 
        web_app: { url: process.env.APP_URL } 
      })],
      [telegramService.createButton('üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'today_tasks')],
      [telegramService.createButton('‚ùì –ü–æ–º–æ—â—å', 'help')]
    ]);

    await telegramService.sendMessage(from.id, welcomeMessage, {
      reply_markup: keyboard
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /help
  static async handleHelpCommand(from) {
    const helpMessage = `${EMOJIS.INFO} *–ü–æ–º–æ—â—å –ø–æ Taskly*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start \\- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/today \\- –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> \\- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/stats \\- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings \\- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help \\- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç \\- –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π\\!

*–ú–∏–Ω–∏\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Taskly"

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:*
/support \\- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–∞—Ç–∞—Ö`;

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', { 
        web_app: { url: process.env.APP_URL } 
      })]
    ]);

    await telegramService.sendMessage(from.id, helpMessage, {
      reply_markup: keyboard
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /today
  static async handleTodayCommand(from, user) {
    if (!user) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.WARNING} –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
      );
      return;
    }

    const today = getCurrentDate(user.timezone);
    const { tasks } = await Task.findByUser(user.id, {
      status: 'today',
      limit: 10
    });

    let message;
    if (tasks.length === 0) {
      message = `${EMOJIS.PARTY} *–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç\\!*

–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–µ–ª\\.`;
    } else {
      message = formatTaskList(tasks, {
        title: `üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${tasks.length})`,
        compact: true
      });
    }

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'add_task')],
      [telegramService.createButton('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', { 
        web_app: { url: process.env.APP_URL } 
      })]
    ]);

    await telegramService.sendMessage(from.id, message, {
      reply_markup: keyboard
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /add
  static async handleAddCommand(from, args, user) {
    if (!user) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.WARNING} –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
      );
      return;
    }

    const taskTitle = args.join(' ').trim();
    
    if (!taskTitle) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.INFO} *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* /add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>

*–ü—Ä–∏–º–µ—Ä:* /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã \\- –æ–Ω —Å—Ç–∞–Ω–µ—Ç –∑–∞–¥–∞—á–µ–π\\!`
      );
      return;
    }

    try {
      const task = await Task.create({
        title: taskTitle,
        priority: 'medium'
      }, user.id);

      const message = `${EMOJIS.SUCCESS} *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞\\!*

${formatTaskForTelegram(task, { compact: true })}`;

      const keyboard = telegramService.createInlineKeyboard([
        [
          telegramService.createButton('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', `${CALLBACK_PREFIXES.TASK_COMPLETE}${task.id}`),
          telegramService.createButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `${CALLBACK_PREFIXES.TASK_EDIT}${task.id}`)
        ],
        [telegramService.createButton('üìã –í—Å–µ –∑–∞–¥–∞—á–∏', 'all_tasks')]
      ]);

      await telegramService.sendMessage(from.id, message, {
        reply_markup: keyboard
      });

    } catch (error) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\.`
      );
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /stats
  static async handleStatsCommand(from, user) {
    if (!user) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.WARNING} –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
      );
      return;
    }

    const stats = await user.getStats();
    const message = formatUserStats(stats, user);

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', { 
        web_app: { url: `${process.env.APP_URL}#/stats` } 
      })]
    ]);

    await telegramService.sendMessage(from.id, message, {
      reply_markup: keyboard
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /settings
  static async handleSettingsCommand(from, user) {
    if (!user) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.WARNING} –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
      );
      return;
    }

    const settings = user.settings;
    const message = `${EMOJIS.SETTINGS} *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${settings.reminder_time}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone}
üåê –Ø–∑—ã–∫: ${user.language_code}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\\.`;

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', { 
        web_app: { url: `${process.env.APP_URL}#/settings` } 
      })]
    ]);

    await telegramService.sendMessage(from.id, message, {
      reply_markup: keyboard
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /support
  static async handleSupportCommand(from) {
    const message = `${EMOJIS.HEART} *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*

Taskly —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ\\!

*–ö–∞–∫ –ø–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É:*
- ${EMOJIS.STAR} –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Telegram Stars
- üîÑ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º
- üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏

*–í–∞—à–∏ –¥–æ–Ω–∞—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç:*
- –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã
- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Taskly\\! ${EMOJIS.ROCKET}`;

    const keyboard = telegramService.createInlineKeyboard([
      [telegramService.createButton('üíô –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', { 
        web_app: { url: `${process.env.APP_URL}#/donate` } 
      })]
    ]);

    await telegramService.sendMessage(from.id, message, {
      reply_markup: keyboard
    });
  }

  // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  static async handleQuickTaskCreation(message, user) {
    const { from, text } = message;
    const taskTitle = text.trim();

    if (taskTitle.length > 100) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.WARNING} –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ \\(–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤\\)`
      );
      return;
    }

    try {
      const task = await Task.create({
        title: taskTitle,
        priority: 'medium'
      }, user.id);

      const responseMessage = `${EMOJIS.SUCCESS} *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞\\!*

${formatTaskForTelegram(task, { compact: true })}`;

      const keyboard = telegramService.createInlineKeyboard([
        [
          telegramService.createButton('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', `${CALLBACK_PREFIXES.TASK_COMPLETE}${task.id}`),
          telegramService.createButton('üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `${CALLBACK_PREFIXES.TASK_EDIT}${task.id}`)
        ]
      ]);

      await telegramService.sendMessage(from.id, responseMessage, {
        reply_markup: keyboard
      });

    } catch (error) {
      await telegramService.sendMessage(
        from.id,
        `${EMOJIS.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\.`
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  static async handleCallbackQuery(callbackQuery) {
    try {
      const { from, data, message } = callbackQuery;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByTelegramId(from.id);
      if (!user) {
        await telegramService.answerCallbackQuery(
          callbackQuery.id,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start',
          true
        );
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
      if (data.startsWith(CALLBACK_PREFIXES.TASK_COMPLETE)) {
        await TelegramHandlers.handleTaskComplete(callbackQuery, user);
      } else if (data.startsWith(CALLBACK_PREFIXES.TASK_DELETE)) {
        await TelegramHandlers.handleTaskDelete(callbackQuery, user);
      } else if (data === 'today_tasks') {
        await TelegramHandlers.handleTodayCommand(from, user);
        await telegramService.answerCallbackQuery(callbackQuery.id);
      } else if (data === 'help') {
        await TelegramHandlers.handleHelpCommand(from);
        await telegramService.answerCallbackQuery(callbackQuery.id);
      } else {
        await telegramService.answerCallbackQuery(
          callbackQuery.id,
          '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
          false
        );
      }

    } catch (error) {
      logger.error('Failed to handle callback query', {
        error: error.message,
        callbackQueryId: callbackQuery.id,
        fromId: callbackQuery.from.id,
        data: callbackQuery.data
      });

      await telegramService.answerCallbackQuery(
        callbackQuery.id,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        true
      );
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  static async handleTaskComplete(callbackQuery, user) {
    const taskId = callbackQuery.data.replace(CALLBACK_PREFIXES.TASK_COMPLETE, '');
    
    try {
      const task = await Task.findById(taskId, user.id);
      
      if (!task) {
        await telegramService.answerCallbackQuery(
          callbackQuery.id,
          '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          true
        );
        return;
      }

      if (task.completed) {
        await telegramService.answerCallbackQuery(
          callbackQuery.id,
          '–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          false
        );
        return;
      }

      await task.markCompleted();

      const updatedMessage = `${EMOJIS.COMPLETED} *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\\!*

~~${escapeMarkdown(task.title)}~~

${EMOJIS.PARTY} –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\\!`;

      await telegramService.editMessage(
        callbackQuery.message.chat.id,
        callbackQuery.message.message_id,
        updatedMessage
      );

      await telegramService.answerCallbackQuery(
        callbackQuery.id,
        '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
        false
      );

    } catch (error) {
      await telegramService.answerCallbackQuery(
        callbackQuery.id,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
        true
      );
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
  static async handleTaskDelete(callbackQuery, user) {
    const taskId = callbackQuery.data.replace(CALLBACK_PREFIXES.TASK_DELETE, '');
    
    try {
      const task = await Task.findById(taskId, user.id);
      
      if (!task) {
        await telegramService.answerCallbackQuery(
          callbackQuery.id,
          '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          true
        );
        return;
      }

      await task.delete();

      await telegramService.editMessage(
        callbackQuery.message.chat.id,
        callbackQuery.message.message_id,
        `${EMOJIS.SUCCESS} –ó–∞–¥–∞—á–∞ "${escapeMarkdown(task.title)}" —É–¥–∞–ª–µ–Ω–∞\\.`
      );

      await telegramService.answerCallbackQuery(
        callbackQuery.id,
        'üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞',
        false
      );

    } catch (error) {
      await telegramService.answerCallbackQuery(
        callbackQuery.id,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
        true
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  static async handleChatMemberUpdate(chatMemberUpdate) {
    try {
      const { from, new_chat_member } = chatMemberUpdate;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞
      if (new_chat_member.status === 'kicked') {
        logger.info('Bot was blocked by user', {
          userId: from.id,
          username: from.username
        });
      } else if (new_chat_member.status === 'member') {
        logger.info('Bot was unblocked by user', {
          userId: from.id,
          username: from.username
        });
      }

    } catch (error) {
      logger.error('Failed to handle chat member update', {
        error: error.message,
        update: chatMemberUpdate
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –¥–æ–Ω–∞—Ç
  static async sendThankYouMessage(chatId, amount) {
    try {
      const message = `${EMOJIS.PARTY} *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\!*

–í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ *${amount}* ${amount === 1 ? '–∑–≤–µ–∑–¥—É' : amount <= 4 ? '–∑–≤–µ–∑–¥—ã' : '–∑–≤–µ–∑–¥'} ${EMOJIS.STAR}

–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è Taskly\\!

${EMOJIS.HEART} –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–∫ –≤—ã, –º—ã –º–æ–∂–µ–º:
- –£–ª—É—á—à–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É

${EMOJIS.ROCKET} –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Taskly –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π\\!`;

      await telegramService.sendMessage(chatId, message);

    } catch (error) {
      logger.error('Failed to send thank you message', {
        error: error.message,
        chatId,
        amount
      });
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  static async sendMessage(chatId, text, options = {}) {
    return await telegramService.sendMessage(chatId, text, options);
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ pre-checkout
  static async answerPreCheckoutQuery(preCheckoutQueryId, ok, errorMessage = null) {
    return await telegramService.answerPreCheckoutQuery(preCheckoutQueryId, ok, errorMessage);
  }
}

module.exports = TelegramHandlers;
