// src/services/telegramHandlers.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞

const { bot } = require('../config/telegram');
const { findUserByTelegramId, createUser } = require('../config/database');

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const handleStartCommand = async (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  try {
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    let dbUser = await findUserByTelegramId(user.id);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!dbUser || dbUser.length === 0) {
      const newUser = {
        telegram_id: user.id,
        telegram_username: user.username || null,
        first_name: user.first_name,
        last_name: user.last_name || null,
        language_code: user.language_code || 'ru'
      };
      
      await createUser(newUser);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}`);
    }
    
    const welcomeMessage = `
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly!*

üìã –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –ø—Ä—è–º–æ –≤ Telegram

‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç Taskly:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
    `;
    
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
              web_app: {
                url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
              }
            }
          ],
          [
            {
              text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              callback_data: 'stats'
            },
            {
              text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
              callback_data: 'settings'
            }
          ],
          [
            {
              text: '‚ùì –ü–æ–º–æ—â—å',
              callback_data: 'help'
            }
          ]
        ]
      }
    };
    
    await bot.sendMessage(chatId, welcomeMessage, options);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
const handleHelpCommand = async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üìñ *–ü–æ–º–æ—â—å –ø–æ Taskly*

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å Taskly" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
2. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ –≤ —É–¥–æ–±–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
3. –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è

üí° *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏
‚Ä¢ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @support
  `;
  
  const options = {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: {
              url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
            }
          }
        ]
      ]
    }
  };
  
  await bot.sendMessage(chatId, helpMessage, options);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const handleStatsCommand = async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    const statsMessage = `
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: 0
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: 0
‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 0
üî• –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: 0

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%

üéØ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
    `;
    
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: {
                url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
              }
            }
          ]
        ]
      }
    };
    
    await bot.sendMessage(chatId, statsMessage, options);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
const handleSettingsCommand = async (msg) => {
  const chatId = msg.chat.id;
  
  const settingsMessage = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: 09:00
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow

üí° –ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  `;
  
  const options = {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            callback_data: 'toggle_notifications'
          }
        ],
        [
          {
            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
            web_app: {
              url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
            }
          }
        ]
      ]
    }
  };
  
  await bot.sendMessage(chatId, settingsMessage, options);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
const handleCallbackQuery = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    switch (data) {
      case 'stats':
        await handleStatsCommand({ chat: { id: chatId }, from: callbackQuery.from });
        break;
        
      case 'settings':
        await handleSettingsCommand({ chat: { id: chatId } });
        break;
        
      case 'help':
        await handleHelpCommand({ chat: { id: chatId } });
        break;
        
      case 'toggle_notifications':
        await bot.editMessageText(
          '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\nüí° –ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    web_app: {
                      url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
                    }
                  }
                ]
              ]
            }
          }
        );
        break;
        
      default:
        await bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const handleTextMessage = async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  if (!text.startsWith('/')) {
    const response = `
üí¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Taskly –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

üì± –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Ç–∞–∫ –Ω–∞–º–Ω–æ–≥–æ —É–¥–æ–±–Ω–µ–µ!

üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    `;
    
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
              web_app: {
                url: process.env.FRONTEND_URL || 'https://your-app.vercel.app'
              }
            }
          ]
        ]
      }
    };
    
    await bot.sendMessage(chatId, response, options);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const initializeHandlers = () => {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
  
  // –ö–æ–º–∞–Ω–¥—ã
  bot.onText(/\/start/, handleStartCommand);
  bot.onText(/\/help/, handleHelpCommand);
  bot.onText(/\/stats/, handleStatsCommand);
  bot.onText(/\/settings/, handleSettingsCommand);
  
  // Callback –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', handleCallbackQuery);
  
  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.on('text', handleTextMessage);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling –±–æ—Ç–∞:', error);
  });
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
};

module.exports = {
  initializeHandlers,
  handleStartCommand,
  handleHelpCommand,
  handleStatsCommand,
  handleSettingsCommand
};
