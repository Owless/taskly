const Donation = require('../models/Donation');
const User = require('../models/User');
const telegramService = require('./telegramService');
const logger = require('../utils/logger');
const { 
  formatDonationMessage, 
  formatDonationAmount, 
  escapeMarkdown 
} = require('../utils/formatters');
const { 
  DONATION_STATUS, 
  DONATION_PRESETS, 
  EMOJIS 
} = require('../config/constants');

class DonationService {
  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
  async createDonationInvoice(userId, amount, description = null) {
    try {
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('User not found');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
      if (amount < 1 || amount > 2500) {
        throw new Error('Invalid donation amount');
      }

      // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      const payload = `donation_${userId}_${Date.now()}`;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
      const invoiceData = {
        title: 'üíô –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Taskly',
        description: description || '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å Taskly –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.',
        payload,
        currency: 'XTR',
        prices: [{
          label: `‚≠ê ${formatDonationAmount(amount)}`,
          amount: amount
        }]
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
      const invoice = await telegramService.sendInvoice(
        user.telegram_id,
        invoiceData.title,
        invoiceData.description,
        invoiceData.payload,
        invoiceData.prices
      );

      logger.donation('Donation invoice created', {
        userId,
        amount,
        payload,
        invoiceMessageId: invoice.message_id
      });

      return {
        invoice,
        payload,
        amount
      };

    } catch (error) {
      logger.error('Failed to create donation invoice', {
        error: error.message,
        userId,
        amount,
        description
      });
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å pre-checkout query
  async handlePreCheckout(preCheckoutQuery) {
    try {
      const { id, from, currency, total_amount, invoice_payload } = preCheckoutQuery;

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º payload
      if (!invoice_payload.startsWith('donation_')) {
        logger.warn('Invalid donation payload in pre-checkout', {
          payload: invoice_payload,
          userId: from.id
        });
        return { ok: false, error: 'Invalid donation payload' };
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
      if (currency !== 'XTR') {
        logger.warn('Invalid currency in pre-checkout', {
          currency,
          userId: from.id
        });
        return { ok: false, error: 'Invalid currency' };
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
      if (total_amount < 1 || total_amount > 2500) {
        logger.warn('Invalid amount in pre-checkout', {
          amount: total_amount,
          userId: from.id
        });
        return { ok: false, error: 'Invalid amount' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await User.findByTelegramId(from.id);
      if (!user) {
        logger.warn('User not found in pre-checkout', {
          telegramId: from.id
        });
        return { ok: false, error: 'User not found' };
      }

      logger.donation('Pre-checkout validated', {
        preCheckoutId: id,
        userId: user.id,
        amount: total_amount
      });

      return { ok: true };

    } catch (error) {
      logger.error('Pre-checkout handling failed', {
        error: error.message,
        preCheckoutQuery
      });
      return { ok: false, error: 'Internal error' };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
  async handleSuccessfulPayment(successfulPayment, fromUser) {
    try {
      const {
        currency,
        total_amount,
        invoice_payload,
        telegram_payment_charge_id
      } = successfulPayment;

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByTelegramId(fromUser.id);
      if (!user) {
        throw new Error('User not found');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
      const existingDonation = await Donation.findByPaymentChargeId(telegram_payment_charge_id);
      if (existingDonation) {
        logger.warn('Duplicate payment processing attempt', {
          chargeId: telegram_payment_charge_id,
          userId: user.id
        });
        return existingDonation;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏
      const donation = await Donation.create({
        user_id: user.id,
        telegram_payment_charge_id,
        amount_stars: total_amount,
        currency,
        status: DONATION_STATUS.COMPLETED,
        description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars'
      });

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
      await donation.markCompleted({
        invoice_payload,
        payment_date: new Date().toISOString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendThankYouMessage(user.telegram_id, total_amount);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –¥–æ–Ω–∞—Ç–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
      await this.notifyAdminAboutDonation(user, donation);

      logger.donation('Donation processed successfully', {
        donationId: donation.id,
        userId: user.id,
        amount: total_amount,
        chargeId: telegram_payment_charge_id
      });

      return donation;

    } catch (error) {
      logger.error('Failed to process successful payment', {
        error: error.message,
        successfulPayment,
        fromUser
      });
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  async sendThankYouMessage(chatId, amount) {
    try {
      let message = `${EMOJIS.PARTY} *–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\!*

–í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ Taskly –Ω–∞ *${formatDonationAmount(amount)}* ${EMOJIS.STAR}

${EMOJIS.HEART} *–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:*
- –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –£–ª—É—á—à–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö

${EMOJIS.ROCKET} –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Taskly –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π\\!

*–° –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é, –∫–æ–º–∞–Ω–¥–∞ Taskly* ${EMOJIS.HEART}`;

      const keyboard = telegramService.createInlineKeyboard([
        [telegramService.createButton('üöÄ –û—Ç–∫—Ä—ã—Ç—å Taskly', { 
          web_app: { url: process.env.APP_URL } 
        })],
        [telegramService.createButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')]
      ]);

      await telegramService.sendMessage(chatId, message, {
        reply_markup: keyboard
      });

    } catch (error) {
      logger.error('Failed to send thank you message', {
        error: error.message,
        chatId,
        amount
      });
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏
  async notifyAdminAboutDonation(user, donation) {
    try {
      const adminTelegramId = process.env.ADMIN_TELEGRAM_ID;
      if (!adminTelegramId) {
        return;
      }

      const message = `${EMOJIS.MONEY} *–ù–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ\\!*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${escapeMarkdown(user.getDisplayName())}
üí∞ *–°—É–º–º–∞:* ${formatDonationAmount(donation.amount_stars)} ${EMOJIS.STAR}
üÜî *ID:* \`${donation.id}\`
üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

${EMOJIS.HEART} –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: *${user.total_donated}* –∑–≤–µ–∑–¥`;

      await telegramService.sendMessage(adminTelegramId, message);

    } catch (error) {
      logger.error('Failed to notify admin about donation', {
        error: error.message,
        donationId: donation.id,
        userId: user.id
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
  async getDonationStats(userId = null) {
    try {
      return await Donation.getStats(userId);
    } catch (error) {
      logger.error('Failed to get donation stats', {
        error: error.message,
        userId
      });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –¥–æ–Ω–∞—Ç–æ—Ä–æ–≤
  async getTopDonors(limit = 10) {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ç–æ–ø –¥–æ–Ω–∞—Ç–æ—Ä–æ–≤
      // –¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      
      logger.info('Top donors request', { limit });
      
      return {
        donors: [],
        message: 'Feature coming soon'
      };

    } catch (error) {
      logger.error('Failed to get top donors', {
        error: error.message,
        limit
      });
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
  async createDonationCampaign(title, description, targetAmount, endDate) {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
      // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–ª—è–º–∏ —Å–±–æ—Ä–∞
      
      logger.info('Donation campaign creation requested', {
        title,
        targetAmount,
        endDate
      });

      return {
        message: 'Donation campaigns feature coming soon'
      };

    } catch (error) {
      logger.error('Failed to create donation campaign', {
        error: error.message,
        title,
        targetAmount
      });
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
  async sendDonationReminder(userId) {
    try {
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('User not found');
      }

      const stats = await user.getStats();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–π
      if (stats.total_tasks < 5) {
        return false;
      }

      let message = `${EMOJIS.HEART} *–ù—Ä–∞–≤–∏—Ç—Å—è Taskly?*

–í—ã —Å–æ–∑–¥–∞–ª–∏ —É–∂–µ *${stats.total_tasks}* –∑–∞–¥–∞—á –∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ *${stats.completed_tasks}*\\! 

${EMOJIS.ROCKET} –ï—Å–ª–∏ Taskly –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\\.

*–í–∞—à–∏ –¥–æ–Ω–∞—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç:*
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã
- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –î–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª—É—á—à–µ

${EMOJIS.STAR} –õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–∂–Ω–∞ \\- –æ—Ç 1 –∑–≤–µ–∑–¥—ã\\!`;

      const keyboard = telegramService.createInlineKeyboard([
        [telegramService.createButton('üíô –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', { 
          web_app: { url: `${process.env.APP_URL}#/donate` } 
        })],
        [telegramService.createButton('‚ùå –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ', 'disable_donation_reminders')]
      ]);

      await telegramService.sendMessage(user.telegram_id, message, {
        reply_markup: keyboard
      });

      logger.donation('Donation reminder sent', {
        userId: user.id,
        totalTasks: stats.total_tasks,
        completedTasks: stats.completed_tasks
      });

      return true;

    } catch (error) {
      logger.error('Failed to send donation reminder', {
        error: error.message,
        userId
      });
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
  getDonationPresets() {
    return {
      presets: DONATION_PRESETS,
      currency: 'XTR',
      minAmount: 1,
      maxAmount: 2500,
      recommended: [5, 25, 100] // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—É–º–º—ã
    };
  }

  // –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
  validateDonationAmount(amount) {
    if (typeof amount !== 'number' || amount < 1 || amount > 2500) {
      return {
        valid: false,
        error: 'Amount must be between 1 and 2500 stars'
      };
    }

    return { valid: true };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatDonationStats(stats) {
    return {
      ...stats,
      formattedTotalAmount: formatDonationAmount(stats.total_amount),
      formattedCompletedAmount: formatDonationAmount(stats.completed_amount),
      formattedAverageDonation: formatDonationAmount(stats.average_donation)
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const donationService = new DonationService();

module.exports = donationService;
