// src/routes/auth.js
// –†–æ—É—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

const express = require('express');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { query, findUserByTelegramId, createUser } = require('../config/database');

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
const verifyTelegramWebAppData = (initData) => {
  try {
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    if (!BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const urlParams = new URLSearchParams(initData);
    const hash = urlParams.get('hash');
    
    if (!hash) {
      throw new Error('Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    urlParams.delete('hash');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const dataCheckString = Array.from(urlParams.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secretKey = crypto
      .createHmac('sha256', 'WebAppData')
      .update(BOT_TOKEN)
      .digest();

    // –í—ã—á–∏—Å–ª—è–µ–º hash
    const calculatedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');

    return hash === calculatedHash;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
};

// –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ initData
const parseUserFromInitData = (initData) => {
  try {
    const urlParams = new URLSearchParams(initData);
    const userJson = urlParams.get('user');
    
    if (!userJson) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    const userData = JSON.parse(decodeURIComponent(userJson));
    
    return {
      telegram_id: userData.id,
      first_name: userData.first_name || '',
      last_name: userData.last_name || '',
      telegram_username: userData.username || null,
      language_code: userData.language_code || 'ru'
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
const createJWTToken = (user) => {
  const payload = {
    userId: user.id,
    telegramId: user.telegram_id,
    iat: Math.floor(Date.now() / 1000)
  };
  
  return jwt.sign(payload, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '7d'
  });
};

// POST /api/auth/login
router.post('/login', async (req, res) => {
  try {
    const { initData } = req.body;

    if (!initData) {
      return res.status(400).json({
        error: 'Bad Request',
        message: '–î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Telegram
    const isValid = verifyTelegramWebAppData(initData);
    if (!isValid) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Telegram'
      });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramUserData = parseUserFromInitData(initData);
    if (!telegramUserData) {
      return res.status(400).json({
        error: 'Bad Request',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await findUserByTelegramId(telegramUserData.telegram_id);
    
    if (!user || user.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramUserData.first_name} (${telegramUserData.telegram_id})`);
      
      const newUserData = {
        ...telegramUserData,
        settings: {
          notifications: true,
          reminder_time: '09:00'
        }
      };
      
      const createdUsers = await createUser(newUserData);
      user = createdUsers[0];
    } else {
      user = user[0];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, username –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
      await query(`
        UPDATE users 
        SET 
          first_name = $1,
          last_name = $2,
          telegram_username = $3,
          language_code = $4,
          updated_at = NOW()
        WHERE id = $5
      `, [
        telegramUserData.first_name,
        telegramUserData.last_name,
        telegramUserData.telegram_username,
        telegramUserData.language_code,
        user.id
      ]);
      
      console.log(`üë§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} (${user.telegram_id})`);
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = createJWTToken(user);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: user.id,
        telegram_id: user.telegram_id,
        first_name: user.first_name,
        last_name: user.last_name,
        telegram_username: user.telegram_username,
        language_code: user.language_code,
        settings: user.settings,
        total_donated: user.total_donated || 0,
        created_at: user.created_at
      },
      token
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// POST /api/auth/refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }

    const token = authHeader.substring(7);
    
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET, { ignoreExpiration: true });
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const users = await query('SELECT * FROM users WHERE id = $1', [decoded.userId]);
      
      if (!users.rows || users.rows.length === 0) {
        return res.status(404).json({
          error: 'Not Found',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      const user = users.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const newToken = createJWTToken(user);

      res.json({
        success: true,
        token: newToken,
        user: {
          id: user.id,
          telegram_id: user.telegram_id,
          first_name: user.first_name,
          last_name: user.last_name,
          telegram_username: user.telegram_username,
          language_code: user.language_code,
          settings: user.settings
        }
      });

    } catch (jwtError) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞'
    });
  }
});

// GET /api/auth/me - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
    }

    const token = authHeader.substring(7);
    
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const users = await query('SELECT * FROM users WHERE id = $1', [decoded.userId]);
      
      if (!users.rows || users.rows.length === 0) {
        return res.status(404).json({
          error: 'Not Found',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      const user = users.rows[0];

      res.json({
        success: true,
        user: {
          id: user.id,
          telegram_id: user.telegram_id,
          first_name: user.first_name,
          last_name: user.last_name,
          telegram_username: user.telegram_username,
          language_code: user.language_code,
          timezone: user.timezone,
          settings: user.settings,
          total_donated: user.total_donated || 0,
          created_at: user.created_at
        }
      });

    } catch (jwtError) {
      return res.status(401).json({
        error: 'Unauthorized',
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;
