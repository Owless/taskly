// src/middleware/errorHandler.js
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è API –æ—à–∏–±–æ–∫
class APIError extends Error {
  constructor(message, statusCode = 500, code = null) {
    super(message);
    this.name = 'APIError';
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = true;
    
    Error.captureStackTrace(this, this.constructor);
  }
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const errorHandler = (error, req, res, next) => {
  let statusCode = error.statusCode || 500;
  let message = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
  let code = error.code || null;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (!isProduction) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', {
      message: error.message,
      stack: error.stack,
      url: req.originalUrl,
      method: req.method,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      userId: req.userId || 'anonymous'
    });
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (statusCode >= 500) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        url: req.originalUrl,
        method: req.method,
        userId: req.userId || 'anonymous',
        timestamp: new Date().toISOString()
      });
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
  
  // PostgreSQL –æ—à–∏–±–∫–∏
  if (error.code && error.code.startsWith('23')) {
    switch (error.code) {
      case '23505': // –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        statusCode = 409;
        message = '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        code = 'DUPLICATE_ENTRY';
        break;
      case '23503': // –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
        statusCode = 400;
        message = '–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å';
        code = 'FOREIGN_KEY_VIOLATION';
        break;
      case '23514': // –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        statusCode = 400;
        message = '–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º';
        code = 'CHECK_VIOLATION';
        break;
      default:
        statusCode = 400;
        message = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
        code = 'DATABASE_ERROR';
    }
  }
  
  // JWT –æ—à–∏–±–∫–∏
  if (error.name === 'JsonWebTokenError') {
    statusCode = 401;
    message = '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    code = 'INVALID_TOKEN';
  } else if (error.name === 'TokenExpiredError') {
    statusCode = 401;
    message = '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫';
    code = 'TOKEN_EXPIRED';
  }
  
  // Joi –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
  if (error.name === 'ValidationError' && error.isJoi) {
    statusCode = 400;
    message = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
    code = 'VALIDATION_ERROR';
  }
  
  // –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
    statusCode = 503;
    message = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    code = 'SERVICE_UNAVAILABLE';
  }
  
  // –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    statusCode = 400;
    message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON';
    code = 'INVALID_JSON';
  }
  
  // –û—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (error.type === 'entity.too.large') {
    statusCode = 413;
    message = '–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π';
    code = 'PAYLOAD_TOO_LARGE';
  }
  
  // –û—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
  if (error.code === 'ETIMEDOUT') {
    statusCode = 408;
    message = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ';
    code = 'REQUEST_TIMEOUT';
  }
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
  const errorResponse = {
    error: getErrorName(statusCode),
    message,
    ...(code && { code }),
    timestamp: new Date().toISOString(),
    path: req.originalUrl
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ development —Ä–µ–∂–∏–º–µ
  if (!isProduction && error.stack) {
    errorResponse.stack = error.stack.split('\n');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (error.details && Array.isArray(error.details)) {
    errorResponse.details = error.details;
  }
  
  res.status(statusCode).json(errorResponse);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–æ—É—Ç—ã)
const notFoundHandler = (req, res, next) => {
  const error = new APIError(
    `–†–æ—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
    404,
    'ROUTE_NOT_FOUND'
  );
  next(error);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
const uncaughtExceptionHandler = (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  if (process.env.NODE_ENV === 'production') {
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Sentry, LogRocket –∏ —Ç.–¥.)
  }
  
  // Graceful shutdown
  process.exit(1);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö Promise –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
const unhandledRejectionHandler = (reason, promise) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  if (process.env.NODE_ENV === 'production') {
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  }
  
  // –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ —Å—Ç–æ–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É
const getErrorName = (statusCode) => {
  const errorNames = {
    400: 'Bad Request',
    401: 'Unauthorized',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    409: 'Conflict',
    413: 'Payload Too Large',
    422: 'Unprocessable Entity',
    429: 'Too Many Requests',
    500: 'Internal Server Error',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout'
  };
  
  return errorNames[statusCode] || 'Unknown Error';
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
const asyncHandler = (fn) => {
  return (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const validateEnvironment = () => {
  const requiredEnvVars = [
    'JWT_SECRET',
    'TELEGRAM_BOT_TOKEN',
    'SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY'
  ];
  
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars);
    process.exit(1);
  }
  
  console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
const initializeGlobalErrorHandlers = () => {
  process.on('uncaughtException', uncaughtExceptionHandler);
  process.on('unhandledRejection', unhandledRejectionHandler);
  
  // Graceful shutdown
  process.on('SIGTERM', () => {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω SIGTERM, –≤—ã–ø–æ–ª–Ω—è–µ–º graceful shutdown...');
    process.exit(0);
  });
  
  process.on('SIGINT', () => {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω SIGINT, –≤—ã–ø–æ–ª–Ω—è–µ–º graceful shutdown...');
    process.exit(0);
  });
};

module.exports = {
  APIError,
  errorHandler,
  notFoundHandler,
  asyncHandler,
  validateEnvironment,
  initializeGlobalErrorHandlers
};
