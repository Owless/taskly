// src/app.js
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Taskly Backend

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
const { checkTables, healthCheck } = require('./config/database');
const { initializeBot } = require('./config/telegram');

const app = express();
const PORT = process.env.PORT || 3000;

// =====================================
// Middleware
// =====================================

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
  contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è Telegram Mini App
  crossOriginEmbedderPolicy: false
}));

// CORS
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: (process.env.RATE_LIMIT_WINDOW || 15) * 60 * 1000,
  max: process.env.RATE_LIMIT_MAX || 100,
  message: {
    error: 'Too Many Requests',
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
  },
  standardHeaders: true,
  legacyHeaders: false
});

app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ 
  limit: '10mb',
  verify: (req, res, buf) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º raw body –¥–ª—è Telegram webhook
    req.rawBody = buf;
  }
}));

app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`üì° ${req.method} ${req.path} - ${req.ip}`);
    next();
  });
}

// =====================================
// –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
// =====================================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'Taskly Backend API',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/health', async (req, res) => {
  try {
    const dbHealth = await healthCheck();
    
    res.json({
      status: 'ok',
      service: 'Taskly Backend',
      version: '1.0.0',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development',
      database: dbHealth
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Health check failed',
      error: error.message
    });
  }
});

// =====================================
// API —Ä–æ—É—Ç—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)
// =====================================

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.use('/api/auth', (req, res, next) => {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  res.json({
    message: 'Auth endpoint - coming soon',
    endpoint: req.originalUrl
  });
});

// –ó–∞–¥–∞—á–∏
app.use('/api/tasks', (req, res, next) => {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  res.json({
    message: 'Tasks endpoint - coming soon',
    endpoint: req.originalUrl
  });
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.use('/api/users', (req, res, next) => {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  res.json({
    message: 'Users endpoint - coming soon',
    endpoint: req.originalUrl
  });
});

// Webhook –¥–ª—è Telegram
app.use('/webhook', (req, res, next) => {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  res.json({
    message: 'Webhook endpoint - coming soon',
    endpoint: req.originalUrl
  });
});

// =====================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// =====================================

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});

// –û–±—â–∏–π error handler
app.use((error, req, res, next) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  
  const isDevelopment = process.env.NODE_ENV === 'development';
  
  res.status(error.status || 500).json({
    error: 'Internal Server Error',
    message: isDevelopment ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(isDevelopment && { stack: error.stack })
  });
});

// =====================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
// =====================================

const startServer = async () => {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Taskly Backend...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const tablesExist = await checkTables();
    
    if (!tablesExist) {
      console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
    const botInitialized = await initializeBot();
    
    if (!botInitialized) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log('‚úÖ Taskly Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      console.log(`üì° –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç: ${PORT}`);
      console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîó URL: http://localhost:${PORT}`);
      console.log(`‚ù§Ô∏è Health check: http://localhost:${PORT}/health`);
      
      if (process.env.NODE_ENV === 'development') {
        console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
        console.log('  GET  / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
        console.log('  GET  /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        console.log('  POST /api/auth/* - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (—Å–∫–æ—Ä–æ)');
        console.log('  *    /api/tasks/* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (—Å–∫–æ—Ä–æ)');
        console.log('  *    /api/users/* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å–∫–æ—Ä–æ)');
        console.log('  POST /webhook/* - Telegram webhook (—Å–∫–æ—Ä–æ)');
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

// Graceful shutdown
const shutdown = async (signal) => {
  console.log(`\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å cleanup –∫–æ–¥
  
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
};

process.on('SIGTERM', () => shutdown('SIGTERM'));
process.on('SIGINT', () => shutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;
