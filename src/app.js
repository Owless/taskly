const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');

const { PORT, NODE_ENV, APP_URL } = require('./config/environment');
const logger = require('./utils/logger');
const database = require('./config/database');
const telegramConfig = require('./config/telegram');

// Middleware - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
const { errorHandler } = require('./middleware/errorHandler');
const rateLimit = require('./middleware/rateLimit');

// Routes
const authRoutes = require('./routes/auth');
const taskRoutes = require('./routes/tasks');
const userRoutes = require('./routes/users');
const donationRoutes = require('./routes/donations');
const webhookRoutes = require('./routes/webhook');

// Services
const cronService = require('./services/cronService');

class App {
  constructor() {
    this.app = express();
    this.setupMiddleware();
    this.setupRoutes();
    this.setupErrorHandling();
  }

  setupMiddleware() {
    // Security middleware
    this.app.use(helmet({
      contentSecurityPolicy: false, // –î–ª—è Telegram Mini App
      crossOriginEmbedderPolicy: false
    }));

    // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram Mini App
    this.app.use(cors({
      origin: [
        'https://web.telegram.org',
        APP_URL,
        /\.telegram\.org$/,
        ...(NODE_ENV === 'development' ? ['http://localhost:3000', 'http://127.0.0.1:3000'] : [])
      ],
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Telegram-Init-Data']
    }));

    // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    this.app.use(compression());

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (NODE_ENV !== 'production') {
      this.app.use(morgan('dev'));
    } else {
      this.app.use(morgan('combined', {
        stream: {
          write: (message) => logger.info(message.trim(), { type: 'http' })
        }
      }));
    }

    // Rate limiting
    this.app.use('/api', rateLimit);

    // Health check (–±–µ–∑ rate limiting)
    this.app.get('/health', this.healthCheck.bind(this));
  }

  setupRoutes() {
    // API Routes
    this.app.use('/api/auth', authRoutes);
    this.app.use('/api/tasks', taskRoutes);
    this.app.use('/api/users', userRoutes);
    this.app.use('/api/donations', donationRoutes);
    
    // Webhook (–±–µ–∑ rate limiting –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    this.app.use('/webhook', webhookRoutes);

    // Root endpoint
    this.app.get('/', (req, res) => {
      res.json({
        success: true,
        message: 'Taskly Backend API',
        version: process.env.npm_package_version || '1.0.0',
        timestamp: new Date().toISOString()
      });
    });

    // 404 handler
    this.app.use('*', (req, res) => {
      res.status(404).json({
        success: false,
        error: {
          code: 'NOT_FOUND',
          message: 'Endpoint not found'
        }
      });
    });
  }

  setupErrorHandling() {
    // –¢–µ–ø–µ—Ä—å errorHandler - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
    this.app.use(errorHandler);
  }

  async healthCheck(req, res) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      const [dbHealth, telegramHealth] = await Promise.all([
        database.healthCheck(),
        telegramConfig.healthCheck()
      ]);

      const isHealthy = dbHealth.connected && telegramHealth.connected;

      res.status(isHealthy ? 200 : 503).json({
        status: isHealthy ? 'healthy' : 'unhealthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        services: {
          database: dbHealth,
          telegram: telegramHealth
        },
        memory: process.memoryUsage(),
        version: process.env.npm_package_version || '1.0.0'
      });
    } catch (error) {
      logger.error('Health check failed:', error);
      res.status(503).json({
        status: 'error',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  async start() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await database.connect();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      await telegramConfig.getBotInfo();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      if (NODE_ENV === 'production') {
        await telegramConfig.setWebhook();
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á–∏
      cronService.start();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      this.server = this.app.listen(PORT, () => {
        logger.info(`üöÄ Taskly Backend started on port ${PORT}`);
        logger.info(`üåç Environment: ${NODE_ENV}`);
        logger.info(`üì± Mini App URL: ${APP_URL}`);
      });

      // Graceful shutdown
      this.setupGracefulShutdown();

    } catch (error) {
      logger.error('‚ùå Failed to start server:', error);
      process.exit(1);
    }
  }

  setupGracefulShutdown() {
    const gracefulShutdown = async (signal) => {
      logger.info(`üì¥ ${signal} received. Starting graceful shutdown...`);

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      if (this.server) {
        this.server.close(() => {
          logger.info('‚úÖ HTTP server closed');
        });
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron –∑–∞–¥–∞—á–∏
      cronService.stop();

      // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      setTimeout(() => {
        logger.info('üëã Graceful shutdown completed');
        process.exit(0);
      }, 5000);
    };

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = new App();

if (require.main === module) {
  app.start();
}

module.exports = app;
