require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const crypto = require('crypto');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Supabase –∫–ª–∏–µ–Ω—Ç—ã
const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// Webhook –¥–ª—è –±–æ—Ç–∞
const WEBHOOK_URL = `${process.env.APP_URL}/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

app.use(express.json());
app.use(express.static('.'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async function setupWebhook() {
  try {
    await bot.setWebHook(WEBHOOK_URL);
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
async function checkBotPermissions() {
  try {
    const botInfo = await bot.getMe();
    console.log('ü§ñ Bot info:', botInfo.username);
    
    if (botInfo.can_receive_payments) {
      console.log('‚úÖ Bot can receive payments');
    } else {
      console.log('‚ùå Bot cannot receive payments - check BotFather settings');
    }
  } catch (error) {
    console.error('Error checking bot:', error);
  }
}

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞
app.post(`/webhook/${process.env.TELEGRAM_BOT_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('Webhook processing error:', error);
    res.sendStatus(500);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  const welcomeMessage = `üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly!*

–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram.

üì± *–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ* - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞
- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É

üí° *–ö–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–º–æ—â—å
/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üöÄ`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
        { text: 'üí´ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', callback_data: 'donate' }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Start command error:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Taskly*

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)
- üìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- üîÑ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á

üì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å Taskly" 
2. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
3. –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
4. –í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
5. –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ä–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –ù–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
- –ù–∞–∂–º–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä—ã: –í—Å–µ/–ê–∫—Ç–∏–≤–Ω—ã–µ/–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
- –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

üí´ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:* /donate

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Help command error:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /donate
bot.onText(/\/donate/, async (msg) => {
  await showDonateOptions(msg.chat.id);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
async function showDonateOptions(chatId) {
  const donateMessage = `üí´ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Taskly*

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞! 

üåü *–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é:*

–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '1 ‚≠ê', callback_data: 'donate_1' },
        { text: '5 ‚≠ê', callback_data: 'donate_5' },
        { text: '10 ‚≠ê', callback_data: 'donate_10' }
      ],
      [
        { text: '25 ‚≠ê', callback_data: 'donate_25' },
        { text: '50 ‚≠ê', callback_data: 'donate_50' }
      ],
      [
        { text: 'üí´ –î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data: 'donate_custom' }
      ],
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, donateMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Show donate options error:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars
async function createInvoice(chatId, amount, description) {
  try {
    console.log(`Creating invoice for ${amount} stars to user ${chatId}`);
    
    await bot.sendInvoice(
      chatId,                                    // chat_id
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Taskly',                       // title (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      description,                              // description (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      `donation_${chatId}_${Date.now()}`,       // payload (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      '',                                       // provider_token (–ø—É—Å—Ç–æ–π –¥–ª—è Stars)
      'XTR',                                   // currency (XTR –¥–ª—è Stars)
      [{ label: `${amount} Stars`, amount: amount }], // prices (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      {
        max_tip_amount: 0,
        suggested_tip_amounts: []
      }
    );
    
    console.log(`‚úÖ Invoice created successfully for ${amount} stars`);
    
  } catch (error) {
    console.error('‚ùå Invoice creation error:', error);
    
    let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂.';
    
    if (error.code === 400) {
      errorMessage = '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç 1 –¥–æ 2500 –∑–≤–µ–∑–¥.';
    } else if (error.code === 401) {
      errorMessage = '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    }
    
    try {
      await bot.sendMessage(chatId, errorMessage);
    } catch (sendError) {
      console.error('Error sending error message:', sendError);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const { data, message } = callbackQuery;
  const chatId = message.chat.id;

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    switch (data) {
      case 'help':
        await bot.sendMessage(chatId, 'üìñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏');
        break;
      
      case 'donate':
        await showDonateOptions(chatId);
        break;
      
      case 'donate_1':
        await createInvoice(chatId, 1, 'üåü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - 1 –∑–≤–µ–∑–¥–∞');
        break;
      
      case 'donate_5':
        await createInvoice(chatId, 5, '‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É - 5 –∑–≤–µ–∑–¥!');
        break;
      
      case 'donate_10':
        await createInvoice(chatId, 10, 'üåü –¢—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω - 10 –∑–≤–µ–∑–¥!');
        break;
      
      case 'donate_25':
        await createInvoice(chatId, 25, '‚ú® –ü–æ—Ç—Ä—è—Å–∞—é—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - 25 –∑–≤–µ–∑–¥!');
        break;
      
      case 'donate_50':
        await createInvoice(chatId, 50, 'üöÄ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - 50 –∑–≤–µ–∑–¥!');
        break;
      
      case 'donate_custom':
        await bot.sendMessage(chatId, 
          'üí´ –í–≤–µ–¥–∏ —Å—É–º–º—É Stars –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 2500):\n\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 25'
        );
        userStates.set(chatId, 'waiting_donation_amount');
        break;
    }
  } catch (error) {
    console.error('Callback query error:', error);
    try {
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    } catch (sendError) {
      console.error('Error sending error message:', sendError);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userState = userStates.get(chatId);

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) return;

  if (userState === 'waiting_donation_amount' && msg.text) {
    const amount = parseInt(msg.text.trim());
    
    if (isNaN(amount) || amount < 1 || amount > 2500) {
      try {
        await bot.sendMessage(chatId, 
          '‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç 1 –¥–æ 2500 Stars\n\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 15'
        );
      } catch (error) {
        console.error('Error sending validation message:', error);
      }
      return;
    }

    userStates.delete(chatId);
    await createInvoice(chatId, amount, `üí´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ ${amount} Stars`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('pre_checkout_query', async (preCheckoutQuery) => {
  try {
    console.log('Pre-checkout query received:', preCheckoutQuery.id);
    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
  } catch (error) {
    console.error('Pre-checkout query error:', error);
    try {
      await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    } catch (answerError) {
      console.error('Error answering pre-checkout query:', answerError);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('successful_payment', async (msg) => {
  const { successful_payment } = msg;
  const chatId = msg.chat.id;
  const amount = successful_payment.total_amount;
  const firstName = msg.from.first_name || '–î—Ä—É–≥';

  console.log(`‚úÖ Successful payment: ${amount} stars from user ${chatId}`);

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
  try {
    await supabaseAdmin
      .from('donations')
      .insert({
        telegram_id: msg.from.id,
        username: msg.from.username,
        first_name: msg.from.first_name,
        amount: amount,
        currency: 'XTR',
        payload: successful_payment.invoice_payload,
        telegram_payment_charge_id: successful_payment.telegram_payment_charge_id,
        provider_payment_charge_id: successful_payment.provider_payment_charge_id
      });
    
    console.log('‚úÖ Donation logged to database');
  } catch (error) {
    console.error('‚ùå Error saving donation:', error);
  }

  const thankMessage = `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*

${firstName}, —Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π! –¢–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ ${amount} ‚≠ê –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

üöÄ –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã, Taskly —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ!

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ],
      [
        { text: 'üí´ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ—â–µ', callback_data: 'donate' }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, thankMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error sending thank you message:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('Telegram polling error:', error);
});

bot.on('webhook_error', (error) => {
  console.error('Telegram webhook error:', error);
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// API: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/auth', async (req, res) => {
  try {
    const { initData } = req.body;
    
    let userData;
    try {
      if (initData && initData.includes('user=')) {
        const userDataString = initData.split('user=')[1].split('&')[0];
        userData = JSON.parse(decodeURIComponent(userDataString));
      } else {
        // –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        userData = {
          id: 123456,
          first_name: "Test User",
          username: "testuser"
        };
      }
    } catch (parseError) {
      userData = {
        id: Date.now(),
        first_name: "Test User",
        username: "testuser"
      };
    }

    console.log('User auth:', userData.id);

    const { data: existingUser, error: selectError } = await supabaseAdmin
      .from('users')
      .select('*')
      .eq('telegram_id', userData.id)
      .maybeSingle();

    let user = existingUser;
    
    if (!existingUser) {
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          telegram_id: userData.id,
          username: userData.username || null,
          first_name: userData.first_name || null,
          last_name: userData.last_name || null
        })
        .select()
        .single();

      if (insertError) throw insertError;
      user = newUser;
    }

    res.json({ success: true, user });
  } catch (error) {
    console.error('Auth error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏
app.get('/api/tasks/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) {
      return res.json({ success: true, tasks: [] });
    }

    const { data: tasks, error } = await supabaseAdmin
      .from('tasks')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    res.json({ success: true, tasks: tasks || [] });
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// API: –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
app.post('/api/tasks', async (req, res) => {
  try {
    const { telegramId, title, description, priority, dueDate } = req.body;
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) throw userError;

    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .insert({
        user_id: user.id,
        title,
        description: description || null,
        priority: priority || 'medium',
        due_date: dueDate || null
      })
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Create task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// API: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
app.put('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Update task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// API: –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
app.delete('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const { error } = await supabaseAdmin
      .from('tasks')
      .delete()
      .eq('id', id);

    if (error) throw error;

    res.json({ success: true });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.get('/api/donations/stats', async (req, res) => {
  try {
    const { data: stats, error } = await supabaseAdmin
      .from('donations')
      .select('amount')
      .eq('currency', 'XTR');

    if (error) throw error;

    const totalAmount = stats.reduce((sum, donation) => sum + donation.amount, 0);
    const totalDonations = stats.length;

    res.json({ 
      success: true, 
      stats: { 
        totalAmount, 
        totalDonations,
        averageAmount: totalDonations > 0 ? Math.round(totalAmount / totalDonations) : 0
      } 
    });
  } catch (error) {
    console.error('Get donation stats error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ Taskly server running on port ${PORT}`);
  console.log(`üì± App URL: ${process.env.APP_URL}`);
  
  await checkBotPermissions();
  await setupWebhook();
  
  console.log('‚úÖ Server ready!');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üõë Shutting down server...');
  
  try {
    await bot.deleteWebHook();
    console.log('‚úÖ Webhook deleted');
  } catch (error) {
    console.error('Error deleting webhook:', error);
  }
  
  process.exit(0);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});
