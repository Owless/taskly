require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const crypto = require('crypto');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Supabase –∫–ª–∏–µ–Ω—Ç—ã
const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// Webhook –¥–ª—è –±–æ—Ç–∞
const WEBHOOK_URL = `${process.env.APP_URL}/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;

app.use(express.json());
app.use(express.static('.'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async function setupWebhook() {
  try {
    await bot.setWebHook(WEBHOOK_URL);
    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞
app.post(`/webhook/${process.env.TELEGRAM_BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  const welcomeMessage = `
üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly!*

–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram.

üì± *–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ* - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞
- –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É

üí° *–ö–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–º–æ—â—å
/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üöÄ
  `;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
        { text: 'üí´ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', callback_data: 'donate' }
      ]
    ]
  };

  await bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Taskly*

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)
- üìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- üîÑ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á

üì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å Taskly" 
2. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
3. –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
4. –í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
5. –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ä–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –ù–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
- –ù–∞–∂–º–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä—ã: –í—Å–µ/–ê–∫—Ç–∏–≤–Ω—ã–µ/–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
- –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

üí´ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:* /donate

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ @your_support_username
  `;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  await bot.sendMessage(chatId, helpMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

bot.onText(/\/donate/, async (msg) => {
  await showDonateOptions(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const { data, message } = callbackQuery;
  const chatId = message.chat.id;

  await bot.answerCallbackQuery(callbackQuery.id);

  switch (data) {
    case 'help':
      await bot.sendMessage(chatId, 'üìñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏');
      break;
    
    case 'donate':
      await showDonateOptions(chatId);
      break;
    
    case 'donate_1':
      await createInvoice(chatId, 1, 'üåü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
      break;
    
    case 'donate_5':
      await createInvoice(chatId, 5, '‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!');
      break;
    
    case 'donate_10':
      await createInvoice(chatId, 10, 'üåü –¢—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω!');
      break;
    
    case 'donate_custom':
      await bot.sendMessage(chatId, 'üí´ –í–≤–µ–¥–∏ —Å—É–º–º—É Stars –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 2500):');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
      userStates.set(chatId, 'waiting_donation_amount');
      break;
  }
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userState = userStates.get(chatId);

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) return;

  if (userState === 'waiting_donation_amount' && msg.text) {
    const amount = parseInt(msg.text);
    
    if (isNaN(amount) || amount < 1 || amount > 2500) {
      await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç 1 –¥–æ 2500 Stars');
      return;
    }

    userStates.delete(chatId);
    await createInvoice(chatId, amount, `üí´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ ${amount} Stars`);
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
async function showDonateOptions(chatId) {
  const donateMessage = `
üí´ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Taskly*

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞! 

üåü *–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é:*

–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '1 ‚≠ê', callback_data: 'donate_1' },
        { text: '5 ‚≠ê', callback_data: 'donate_5' },
        { text: '10 ‚≠ê', callback_data: 'donate_10' }
      ],
      [
        { text: 'üí´ –î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data: 'donate_custom' }
      ],
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  await bot.sendMessage(chatId, donateMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars
async function createInvoice(chatId, amount, description) {
  try {
    const invoice = {
      chat_id: chatId,
      title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Taskly',
      description: description,
      payload: `donation_${chatId}_${Date.now()}`,
      currency: 'XTR', // Telegram Stars
      prices: [{ label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', amount: amount }]
    };

    await bot.sendInvoice(invoice);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('successful_payment', async (msg) => {
  const { successful_payment } = msg;
  const chatId = msg.chat.id;
  const amount = successful_payment.total_amount;
  const firstName = msg.from.first_name || '–î—Ä—É–≥';

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
  try {
    await supabaseAdmin
      .from('donations')
      .insert({
        telegram_id: msg.from.id,
        username: msg.from.username,
        first_name: msg.from.first_name,
        amount: amount,
        currency: 'XTR',
        payload: successful_payment.invoice_payload,
        telegram_payment_charge_id: successful_payment.telegram_payment_charge_id,
        provider_payment_charge_id: successful_payment.provider_payment_charge_id
      });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–Ω–∞—Ü–∏–∏:', error);
  }

  const thankMessage = `
üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*

${firstName}, —Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π! –¢–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ ${amount} ‚≠ê –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

üöÄ –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã, Taskly —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ!

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!
  `;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  await bot.sendMessage(chatId, thankMessage, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('pre_checkout_query', async (preCheckoutQuery) => {
  // –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
  await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('Telegram polling error:', error);
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// API endpoints (—Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
app.post('/api/auth', async (req, res) => {
  try {
    const { initData } = req.body;
    
    let userData;
    try {
      if (initData.includes('user=')) {
        const userDataString = initData.split('user=')[1].split('&')[0];
        userData = JSON.parse(decodeURIComponent(userDataString));
      } else {
        userData = {
          id: 123456,
          first_name: "Test User",
          username: "testuser"
        };
      }
    } catch (parseError) {
      userData = {
        id: Date.now(),
        first_name: "Test User",
        username: "testuser"
      };
    }

    const { data: existingUser, error: selectError } = await supabaseAdmin
      .from('users')
      .select('*')
      .eq('telegram_id', userData.id)
      .maybeSingle();

    let user = existingUser;
    
    if (!existingUser) {
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          telegram_id: userData.id,
          username: userData.username || null,
          first_name: userData.first_name || null,
          last_name: userData.last_name || null
        })
        .select()
        .single();

      if (insertError) throw insertError;
      user = newUser;
    }

    res.json({ success: true, user });
  } catch (error) {
    console.error('Auth error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ API endpoints (tasks) - —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
app.get('/api/tasks/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) {
      return res.json({ success: true, tasks: [] });
    }

    const { data: tasks, error } = await supabaseAdmin
      .from('tasks')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    res.json({ success: true, tasks: tasks || [] });
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.post('/api/tasks', async (req, res) => {
  try {
    const { telegramId, title, description, priority, dueDate } = req.body;
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) throw userError;

    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .insert({
        user_id: user.id,
        title,
        description: description || null,
        priority: priority || 'medium',
        due_date: dueDate || null
      })
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Create task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.put('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Update task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.delete('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const { error } = await supabaseAdmin
      .from('tasks')
      .delete()
      .eq('id', id);

    if (error) throw error;

    res.json({ success: true });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`Taskly server running on port ${PORT}`);
  await setupWebhook();
});
