require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Supabase –∫–ª–∏–µ–Ω—Ç—ã
const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

app.use(express.json());
app.use(express.static('.'));

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ (–¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
app.post('/api/create-invoice', async (req, res) => {
  try {
    const { amount, payload, userId } = req.body;
    
    if (!amount || amount < 1 || amount > 2500) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' 
      });
    }

    const invoiceParams = {
      title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Taskly',
      description: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Taskly`,
      payload: payload,
      provider_token: '', // –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
      currency: 'XTR',
      prices: JSON.stringify([{ 
        label: `${amount} Stars`, 
        amount: amount 
      }]),
      start_parameter: 'donation',
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    };

    console.log('Creating invoice for:', amount, 'stars for user:', userId);

    // –°–æ–∑–¥–∞–µ–º invoice link —á–µ—Ä–µ–∑ Telegram Bot API
    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/createInvoiceLink`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(invoiceParams)
    });

    const result = await response.json();
    
    if (!result.ok) {
      console.error('Telegram API error:', result);
      throw new Error(result.description || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞');
    }
    
    console.log('‚úÖ Invoice created successfully');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    try {
      await supabaseAdmin
        .from('pending_donations')
        .insert({
          telegram_id: userId,
          amount: amount,
          payload: payload,
          status: 'pending',
          created_at: new Date().toISOString()
        });
      
      console.log('‚úÖ Pending donation saved');
    } catch (dbError) {
      console.error('‚ùå Error saving pending donation:', dbError);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    }
    
    res.json({ 
      success: true, 
      invoiceLink: result.result 
    });
    
  } catch (error) {
    console.error('Create invoice error:', error);
    res.status(400).json({ 
      success: false, 
      error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞' 
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π)
app.get('/api/bot-token', (req, res) => {
  res.json({ token: process.env.TELEGRAM_BOT_TOKEN });
});

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–æ—Ç–∞
app.post(`/webhook/${process.env.TELEGRAM_BOT_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('Webhook processing error:', error);
    res.sendStatus(500);
  }
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  const welcomeMessage = `üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Taskly!*

–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram.

üì± *–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ* - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å—Ä–æ–∫–∏
- –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üí° *–ö–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–º–æ—â—å

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üöÄ`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
      ]
    ]
  };

  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    if (process.env.START_IMAGE_URL) {
      await bot.sendPhoto(chatId, process.env.START_IMAGE_URL, {
        caption: welcomeMessage,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  } catch (error) {
    console.error('Start command error:', error);
    // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    try {
      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (fallbackError) {
      console.error('Fallback start command error:', fallbackError);
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Taskly*

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)
- ‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- üîÑ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

üì± *–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á:*
üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ - –∑–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
üî• –°–µ–≥–æ–¥–Ω—è - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚≠ê –ó–∞–≤—Ç—Ä–∞ - –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
üìÖ –ù–∞ –Ω–µ–¥–µ–ª–µ - –∑–∞–¥–∞—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
üìã –ü–æ–∑–∂–µ - –∑–∞–¥–∞—á–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
üìù –ë–µ–∑ —Å—Ä–æ–∫–∞ - –∑–∞–¥–∞—á–∏ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
- –ù–∞–∂–º–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä—ã: –ê–∫—Ç–∏–≤–Ω—ã–µ/–í—Å–µ/–ê—Ä—Ö–∏–≤
- –ù–∞–∂–º–∏ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Help command error:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  
  if (data === 'help') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    bot.answerCallbackQuery(callbackQuery.id);
    
    const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Taskly*

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
- ‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- üîÑ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
- –ù–∞–∂–º–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä—ã: –ê–∫—Ç–∏–≤–Ω—ã–µ/–í—Å–µ/–ê—Ä—Ö–∏–≤
- –ù–∞–∂–º–∏ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫`;

    try {
      await bot.sendMessage(message.chat.id, helpMessage, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Help callback error:', error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('successful_payment', async (msg) => {
  const { successful_payment } = msg;
  const chatId = msg.chat.id;
  const amount = successful_payment.total_amount;
  const firstName = msg.from.first_name || '–î—Ä—É–≥';
  const payload = successful_payment.invoice_payload;

  console.log(`‚úÖ Successful payment: ${amount} stars from user ${chatId}, payload: ${payload}`);

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
  try {
    await supabaseAdmin
      .from('donations')
      .insert({
        telegram_id: msg.from.id,
        username: msg.from.username,
        first_name: msg.from.first_name,
        amount: amount,
        currency: 'XTR',
        payload: payload,
        telegram_payment_charge_id: successful_payment.telegram_payment_charge_id,
        provider_payment_charge_id: successful_payment.provider_payment_charge_id,
        status: 'completed',
        completed_at: new Date().toISOString()
      });
    
    console.log('‚úÖ Donation logged to database');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å pending donation
    await supabaseAdmin
      .from('pending_donations')
      .update({ 
        status: 'completed',
        completed_at: new Date().toISOString()
      })
      .eq('payload', payload);
      
  } catch (error) {
    console.error('‚ùå Error saving donation:', error);
  }

  const thankMessage = `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*

${firstName}, —Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π! –¢–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ ${amount} ‚≠ê –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

üöÄ –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –ª—é–¥—è–º –∫–∞–∫ —Ç—ã, Taskly —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ!

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!`;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Taskly',
          web_app: { url: process.env.APP_URL }
        }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, thankMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error sending thank you message:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π (pre_checkout_query)
bot.on('pre_checkout_query', async (preCheckoutQuery) => {
  console.log('Pre-checkout query received:', preCheckoutQuery);
  
  try {
    // –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
    console.log('‚úÖ Pre-checkout query approved');
  } catch (error) {
    console.error('‚ùå Error answering pre-checkout query:', error);
    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
      error_message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// API: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/auth', async (req, res) => {
  try {
    const { initData } = req.body;
    
    let userData;
    try {
      if (initData && initData.includes('user=')) {
        const userDataString = initData.split('user=')[1].split('&')[0];
        userData = JSON.parse(decodeURIComponent(userDataString));
      } else {
        throw new Error('No user data in initData');
      }
    } catch (parseError) {
      return res.status(401).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
      });
    }

    console.log('User auth:', userData.id);

    const { data: existingUser, error: selectError } = await supabaseAdmin
      .from('users')
      .select('*')
      .eq('telegram_id', userData.id)
      .maybeSingle();

    let user = existingUser;
    
    if (!existingUser) {
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          telegram_id: userData.id,
          username: userData.username || null,
          first_name: userData.first_name || null,
          last_name: userData.last_name || null
        })
        .select()
        .single();

      if (insertError) throw insertError;
      user = newUser;
    }

    res.json({ success: true, user });
  } catch (error) {
    console.error('Auth error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// API endpoints –¥–ª—è –∑–∞–¥–∞—á
app.get('/api/tasks/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) {
      return res.json({ success: true, tasks: [] });
    }

    const { data: tasks, error } = await supabaseAdmin
      .from('tasks')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    res.json({ success: true, tasks: tasks || [] });
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.post('/api/tasks', async (req, res) => {
  try {
    const { telegramId, title, description, priority, dueDate } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if (!title || title.length > 100) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }
    
    if (description && description.length > 500) {
      return res.status(400).json({ 
        success: false, 
        error: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }
    
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('id')
      .eq('telegram_id', telegramId)
      .single();

    if (userError) throw userError;

    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .insert({
        user_id: user.id,
        title: title.trim(),
        description: description ? description.trim() : null,
        priority: priority || 'medium',
        due_date: dueDate || null
      })
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Create task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.put('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (updates.title && (updates.title.length === 0 || updates.title.length > 100)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }
    
    if (updates.description && updates.description.length > 500) {
      return res.status(400).json({ 
        success: false, 
        error: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }
    
    // –ï—Å–ª–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, –¥–æ–±–∞–≤–ª—è–µ–º completed_at
    if (updates.completed && !updates.completed_at) {
      updates.completed_at = new Date().toISOString();
    } else if (updates.completed === false) {
      updates.completed_at = null;
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    if (updates.title) {
      updates.title = updates.title.trim();
    }
    if (updates.description) {
      updates.description = updates.description.trim();
    }
    
    const { data: task, error } = await supabaseAdmin
      .from('tasks')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, task });
  } catch (error) {
    console.error('Update task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

app.delete('/api/tasks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const { error } = await supabaseAdmin
      .from('tasks')
      .delete()
      .eq('id', id);

    if (error) throw error;

    res.json({ success: true });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(400).json({ success: false, error: error.message });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async function setupWebhook() {
  try {
    const webhookUrl = `${process.env.APP_URL}/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;
    await bot.setWebHook(webhookUrl);
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ Taskly server running on port ${PORT}`);
  console.log(`üì± App URL: ${process.env.APP_URL}`);
  
  if (process.env.START_IMAGE_URL) {
    console.log(`üñºÔ∏è Start image URL: ${process.env.START_IMAGE_URL}`);
  }
  
  await setupWebhook();
  
  console.log('‚úÖ Server ready!');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üõë Shutting down server...');
  
  try {
    await bot.deleteWebHook();
    console.log('‚úÖ Webhook deleted');
  } catch (error) {
    console.error('Error deleting webhook:', error);
  }
  
  process.exit(0);
});
